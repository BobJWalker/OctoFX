step "Calculate Deployment Mode" {

    action {
        notes = <<-EOT
                **Always Runs**
                
                This step determines what Octopus is doing, deploying, redeploying, or rolling back.
            EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-347"
            Octopus.Action.Template.Version = "139"
        }
        worker_pool = "Default Worker Pool"
    }
}

step "Run Database Creation Runbook" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        notes = <<-EOT
                **Runs on Deployments only**
                
                Runs the `Create OctoFx Database If Not Exists` runbook to ensure the database is there and ready for deployments.
            EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-346"
            Octopus.Action.Template.Version = "13"
            Run.Runbook.Api.Key = "#{DeployProcess.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create OctoFx Database If Not Exists"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "Default Worker Pool"
    }
}

step "Generate Database Delta Report" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments only**
                
                Deploys the changes to the OctoFX database.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[OctoFX.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Database.ConnectionString"]
                $reportPath = $OctopusParameters["Project.HtmlReport.Location"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                Write-Host "The package path is: $packagePath"
                $dllToRun = "$packagePath/sakila.mssql.dbup.dll"
                $generatedReport = "$reportPath/UpgradeReport.html"
                
                if ((test-path $reportPath) -eq $false){
                	New-Item $reportPath -ItemType "directory"
                }
                
                dotnet $dllToRun --ConnectionString="$connectionString" --PreviewReportPath="$reportPath"
                
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Default Worker Pool"

        packages "OctoFX.Database" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoFX.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Verify Database Delta Report" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["Production"]
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Pause the deployment and verify everything is running correctly.
            EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please review the database delta report artifact."
            Octopus.Action.Manual.ResponsibleTeamIds = "Octopus Administrators,Octopus Managers,DBA"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "Deploy OctoFX Database" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments only**
                
                Deploys the changes to the OctoFX database.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[OctoFX.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Database.ConnectionString"]
                
                Write-Host "The package path is: $packagePath"
                $dllToRun = "$packagePath/sakila.mssql.dbup.dll"
                
                # How you run this .NET core app
                dotnet $dllToRun --ConnectionString="$connectionString"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Default Worker Pool"

        packages "OctoFX.Database" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoFX.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Deploy OctoFX Windows Service" {
    condition = "Variable"
    properties = {
        Octopus.Action.TargetRoles = "octofx-service"
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeployOrRollback}#{/unless}"
    }

    action {
        action_type = "Octopus.WindowsService"
        notes = <<-EOT
                **Runs on Deployments and Rollbacks**
                
                Deploys the OctoFX Rate Service to the app server.
            EOT
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.WindowsService,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "OctoFX.RateService"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.WindowsService.CreateOrUpdateService = "True"
            Octopus.Action.WindowsService.DesiredStatus = "Default"
            Octopus.Action.WindowsService.DisplayName = "OctoFX Rate Service for #{Octopus.Environment.Name}"
            Octopus.Action.WindowsService.ExecutablePath = "OctoFX.RateService.exe"
            Octopus.Action.WindowsService.ServiceAccount = "LocalSystem"
            Octopus.Action.WindowsService.ServiceName = "#{Application.Service.Name}"
            Octopus.Action.WindowsService.StartMode = "auto"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoFX.RateService"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Force Failure" {

    action {
        action_type = "Octopus.Script"
        environments = ["Production", "Development"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                Write-Highlight "Forcing a failure!"
                Exit 1
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Default Worker Pool"
    }
}

step "Deploy OctoFX Website" {
    properties = {
        Octopus.Action.TargetRoles = "octofx-web"
    }

    action {
        action_type = "Octopus.IIS"
        notes = <<-EOT
                **Runs on Deployments, Rollbacks, and Redeployments**
                
                Deploy the OctoFX website to the web server.
            EOT
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.IISWebSite,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.IISWebSite.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.ApplicationPoolName = "#{Application.Website.Name}"
            Octopus.Action.IISWebSite.Bindings = "[{\"protocol\":\"http\",\"port\":\"80\",\"host\":\"www.#{Application.Website.Name}.com\",\"thumbprint\":null,\"certificateVariable\":null,\"requireSni\":\"False\",\"enabled\":\"True\"}]"
            Octopus.Action.IISWebSite.CreateOrUpdateWebSite = "True"
            Octopus.Action.IISWebSite.DeploymentType = "webSite"
            Octopus.Action.IISWebSite.EnableAnonymousAuthentication = "True"
            Octopus.Action.IISWebSite.EnableBasicAuthentication = "False"
            Octopus.Action.IISWebSite.EnableWindowsAuthentication = "False"
            Octopus.Action.IISWebSite.StartApplicationPool = "True"
            Octopus.Action.IISWebSite.StartWebSite = "True"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.WebRootType = "packageRoot"
            Octopus.Action.IISWebSite.WebSiteName = "#{Application.Website.Name}"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "OctoFX.TradingWebsite"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "OctoFX.TradingWebsite"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Check if rollback is needed" {
    condition = "Failure"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs when previous steps fail**
                
                This step contains some business logic to determine if it is appropriate to rollback to a previous version.  It will only rollback if:
                
                - Deployment Mode is **Deploy**
                - No database changes were found in the delta script
                - The web service or the website was deployed
                
                If those conditions are not met, it will not trigger an automatic rollback.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $CommandsToLookFor = "Create Table,Alter Table,Drop Table,Drop View,Create View,Create Function,Drop Function,sp_addrolemember,sp_droprolemember,alter role,Merge,Create Schema,Select,Insert,Update,Delete"
                
                $OctopusURL = $OctopusParameters["Approval.Base.Url"]
                $APIKey = $OctopusParameters["Approval.Api.Key"]
                $FileExtension = ".html"
                $SpaceId = $OctopusParameters["Octopus.Space.Id"]
                $DeploymentId = $OctopusParameters["Octopus.Deployment.Id"]
                $EnvironmentId = $OctopusParameters["Octopus.Environment.Id"]
                $ProjectId = $OctopusParameters["Octopus.Project.Id"]
                $StatusOfWindowsService = $OctopusParameters["Octopus.Action[Deploy OctoFX Windows Service].Status.Code"]
                $StatusOfWebSite = $OctopusParameters["Octopus.Action[Deploy OctoFX Website].Status.Code"]
                $DeploymentMode = $OctopusParameters["Octopus.Action[Calculate Deployment Mode].Output.DeploymentMode"]
                $ApprovalId = $OctopusParameters["Octopus.ServiceNow.ChangeRequest.Number"]
                
                if ($DeploymentMode -ne "Deploy")
                {
                	Write-Highlight "Not doing a deployment, exiting this script"
                    exit 0
                }
                
                Write-Host "Status of Windows Service Deployment: $StatusOfWindowsService"
                Write-Host "Status of Website Deployment: $StatusOfWebSite"
                
                if ($StatusOfWindowsService -ne "Succeeded" -and $StatusOfWebSite -ne "Succeeded")
                {
                	Write-Highlight "No code was deployed, nothing to rollback.  Exiting."
                    exit 0
                }
                
                Write-Host "Commands to look for: $CommandsToLookFor"
                Write-Host "Octopus Url: $OctopusUrl"
                Write-Host "SpaceId: $SpaceId"
                Write-Host "DeploymentId: $DeploymentId"
                Write-Host "File Extension: $FileExtension"
                Write-Host "Approval ID: $ApprovalId"
                
                $header = @{ "X-Octopus-ApiKey" = $APIKey }
                
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $artifactUrl = "$OctopusUrl/api/$SpaceId/artifacts?take=2147483647&regarding=$DeploymentId&order=asc"
                Write-Host "Getting the artifacts from $artifactUrl"
                $artifactResponse = Invoke-RestMethod $artifactUrl -Headers $header
                $fileListToCheck = @()
                
                foreach ($artifact in $artifactResponse.Items)
                {
                    $fileName = $artifact.Filename
                
                    if ($fileName.EndsWith($FileExtension))
                    {    	
                        Write-Host "The artifact is a SQL Script, downloading"
                        $artifactId = $artifact.Id
                        $artifactContentUrl = "$OctopusUrl/api/$SpaceId/artifacts/$artifactId/content"
                        Write-Host "Pulling the content from $artifactContentUrl"
                        $fileContent += Invoke-RestMethod $artifactContentUrl -Headers $header
                        Write-Host "Finished downloading the file $fileName"
                        
                        $sqlFileToCheck = @{
                        	FileName = $fileName;
                            Content = $fileContent;
                        }
                        
                        $fileListToCheck += $sqlFileToCheck                
                    }    
                }
                
                $foundSQL = $false
                
                if ($fileListToCheck.Length -le 0)
                {
                	Write-Highlight "No database artifacts were found"
                }
                
                Write-Host "Looping through all commands"
                $commandListToCheck = $CommandsToLookFor -split ","
                foreach ($sqlFile in $fileListToCheck)
                {    
                	foreach ($command in $commandListToCheck)
                    {
                    	Write-Host "Checking $($sqlFile.FileName) for command $command"
                    	$foundCommand = $sqlFile.Content -match "$command"
                    
                    	if ($foundCommand)
                        {
                        	Write-Highlight "$($sqlFile.FileName) has the command '$command'"
                            $foundSQL = $true
                        }
                    }
                } 
                
                if ($foundSQL -eq $true)
                {
                	Write-Highlight "Database changes were found, cannot auto rollback"
                    exit 0
                }
                
                $lastSuccessfulTaskUrl = "$OctopusUrl/api/tasks?skip=0&take=2&environment=$environmentId&project=$projectId&states=Success&spaces=$spaceId&includeSystem=false&name=Deploy"
                Write-Host "Querying the url $lastSuccessfulTaskUrl to find the last successful deployment that went to this environment"
                $lastSuccessfulTaskResponse = Invoke-RestMethod $lastSuccessfulTaskUrl -headers $header
                $lastSuccessfulTask = $lastSuccessfulTaskResponse.Items[0]
                
                $deploymentId = $lastSuccessfulTask.Arguments.DeploymentId
                Write-Host "Pulling back the deployment details for $($lastSuccessfulTask.Id) for deployment $deploymentId"
                $lastSuccessfulDeployment = Invoke-RestMethod "$OctopusUrl/api/$SpaceId/deployments/$deploymentId" -headers $header
                $releaseId = $lastSuccessfulDeployment.ReleaseId
                
                Write-host "Pulling back the release information for $releaseId"
                $lastSuccessfulRelease = Invoke-RestMethod "$OctopusUrl/api/$SpaceId/releases/$releaseId" -headers $header
                $version = $lastSuccessfulRelease.Version
                
                Write-Highlight "Rolling back to $version"
                octo deploy-release --project=$projectId --deployTo=$environmentId --releaseNumber=$version --server="$octopusUrl" --apiKey=$apiKey --variable "ServiceNow Change Request Number:$ApprovalId"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Default Worker Pool"
    }
}

step "Notify Stakeholders" {
    condition = "Always"

    action {
        action_type = "Octopus.Email"
        notes = <<-EOT
                **Always Runs**
                
                Send an email to the stakeholders informing them of the result of the deployment.  Will run even if an error occurs.
            EOT
        properties = {
            Octopus.Action.Email.Body = <<-EOT
                The #{Octopus.Project.Name} deployment to #{Octopus.Environment.Name} #{If Octopus.Deployment.Error}failed#{else}completed successfully#{/if}
                
                #{Octopus.Web.ServerUri}/app#/#{Octopus.Space.Id}/tasks/#{Octopus.Task.Id}
                
                #{if Octopus.Deployment.Error}
                #{Octopus.Deployment.Error}
                #{/if}
            EOT
            Octopus.Action.Email.IsHtml = "False"
            Octopus.Action.Email.Subject = "#{Octopus.Project.Name} deployment to #{Octopus.Environment.Name} #{If Octopus.Deployment.Error}failed#{else}completed successfully#{/if}"
            Octopus.Action.Email.ToTeamIds = "Octopus Managers"
            Octopus.Action.RunOnServer = "false"
        }
    }
}